//Michael Adolph, Dungeon Delve -- 22:33:18 -- 12/8/19

#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <string>

using namespace std;

//Game Functions:

void restart();
void gameover();
void gamewin();

//Weapon Structure:

struct weapon {

	int damage;
	string tier;
	string type;
	string name;

};

//Enemy Classes

class Tier1 {
public:

	int health;
	bool T1Flag = false;
	string name;
	string enter;


	int T1DeathCheck() {
		return T1Flag = true;
	}

	int T1Attack() {
		srand(time(NULL));
		return rand() % 3 + 1;
	}

};

class Tier2 {
public:
	int health;
	bool T2Flag = false;
	string enter;

	int T2Attack() {
		srand(time(NULL));
		return rand() % 7 + 1;
	}

	int T2DeathCheck() {
		return T2Flag = true;
	}

};

class Tier3 {
public:
	int health;
	bool T3Flag = false;
	string enter;

	int T3Attack() {
		srand(time(NULL));
		return rand() % 12 + 1;
	}
	int T3DeathCheck() {
		return T3Flag = true;
	}
};

class Tier4 {
public:
	int health;
	bool T4Flag = false;
	string enter;

	int T4Attack() {
		srand(time(NULL));
		return rand() % 16 + 1;
	}
	int T4DeathCheck() {
		return T4Flag = true;
	}

};

class TierBoss {
public:
	int health;
	bool TBFlag = false;
	string enter;

	int TBAttack() {
		srand(time(NULL));
		return rand() % 20 + 1;
	}
	int TBDeathCheck() {
		return TBFlag = true;
	}
};

//Character Class:

class character {
public:
	int health;
	int maxhealth;
	weapon currentweapon;
	string backstory, fname, lname;

	const int heal = 30;
	int potcount;
	int potuse() {
		if (potcount > 0 && health + 15 <= 100) {
			potcount -= 1;
			return heal;
		}
		else
			return 0;
	};
};

int main() {

	character Player;

	srand(time(NULL));
	int player_background_rand = rand() % 3 + 1;

	switch (player_background_rand) {

	case 1:
		Player.currentweapon = {

		};

		Player.backstory = "";
		break;

	case 2:
		Player.currentweapon = {

		};

		Player.backstory = "";
		break;

	case 3:
		Player.currentweapon = {

		};

		Player.backstory = "";
		break;

	}

	weapon T1Drop, T2Drop, T3Drop, T4Drop;

	Tier1 T1E, T2E, T3E, T4E, TBE;

	//T1E

	srand(time(NULL));
	int randnum = rand() % 3 + 1;

	switch (randnum) {

	case 1:
		T1E.name = "Highway Grunt";
		T1E.health = 5;
		T1E.enter = "";
		break;

	case 2:
		T1E.name = "Highwy Runner";
		T1E.health = 6;
		T1E.enter = "";
		break;

	case 3:
		T1E.name = "Highway Wheeler";
		T1E.health = 5;
		T1E.enter = "";
		break;
	}

	//T2E

	srand(time(NULL));
	randnum = rand() % 3 + 1;

	switch (randnum) {

	case 1:
		T2E.name = "Highway Bandit";
		T2E.health = 12;
		T2E.enter = "";
		break;

	case 2:
		T2E.name = "Highwy Raider";
		T2E.health = 10;
		T2E.enter = "";
		break;

	case 3:
		T2E.name = "Highway Wheeler";
		T2E.health = 15;
		T2E.enter = "";
		break;
	}

	//T3E

	srand(time(NULL));
	randnum = rand() % 3 + 1;

	switch (randnum) {

	case 1:
		T3E.name = "Highway Grunt";
		T3E.health = 20;
		T3E.enter = "";
		break;

	case 2:
		T3E.name = "Highwy Runner";
		T3E.health = 25;
		T3E.enter = "";
		break;

	case 3:
		T3E.name = "Highway Wheeler";
		T3E.health = 18;
		T3E.enter = "";
		break;
	}

	//T4E

	srand(time(NULL));
	randnum = rand() % 3 + 1;

	switch (randnum) {

	case 1:
		T4E.name = "Highway Grunt";
		T4E.health = 35;
		T4E.enter = "";
		break;

	case 2:
		T4E.name = "Highwy Runner";
		T4E.health = 36;
		T4E.enter = "";
		break;

	case 3:
		T4E.name = "Highway Wheeler";
		T4E.health = 30;
		T4E.enter = "";
		break;
	}

	//TBE

	srand(time(NULL));
	randnum = rand() % 3 + 1;

	switch (randnum) {

	case 1:
		TBE.name = "Highway Grunt";
		TBE.health = 50;
		TBE.enter = "";
		break;

	case 2:
		TBE.name = "Highwy Runner";
		TBE.health = 45;
		TBE.enter = "";
		break;

	case 3:
		TBE.name = "Highway Wheeler";
		TBE.health = 55;
		TBE.enter = "";
		break;
	}

	//Tier 1 Loot:

	srand(time(NULL));
	int t1rd = rand() % 8 + 1;

	switch (t1rd) {

	case 1:
		T1Drop = {
		  6,
		  "Tier One",
		  "Pistol",
		  "Factory New Desert Eagle"
		};
		break;

	case 2:
		T1Drop = {
		  4,
		  "Tier One",
		  "Pistol",
		  "Rusted Desert Eagle"
		};
		break;

	case 3:
		T1Drop = {
		  4,
		  "Tier One",
		  "Pistol",
		  "Rusted Desert Eagle"
		};
		break;

	case 4:
		T1Drop = {
		  3,
		  "Tier One",
		  "Pistol",
		  "Very Rusted Desert Eagle"
		};
		break;

	case 5:
		T1Drop = {
		  6,
		  "Tier One",
		  "Pistol",
		  "Factory New Desert Eagle"
		};
		break;

	case 6:
		T1Drop = {
		   5,
		   "Tier One",
		   "Pistol",
		   "Factory New .44 Pistol"
		};
		break;

	case 7:
		T1Drop = {
		  4,
		  "Tier One",
		  "Pistol",
		  "Rusted .44 Pistol"
		};
		break;

	case 8:
		T1Drop = {
		  3,
		  "Tier One",
		  "Pistol",
		  "Very Rusted .44 Pistol"
		};
		break;
	}

	//Tier 2 Loot:

	srand(time(NULL));
	int t2rd = rand() % 8 + 1;

	switch (t2rd) {

	case 1:
		T2Drop = {};
		break;

	case 2:
		T2Drop = {};
		break;

	case 3:
		T2Drop = {};
		break;

	}

	//Tier 3 Loot:

	srand(time(NULL));
	int t3rd = rand() % 8 + 1;

	switch (t3rd) {

	case 1:
		T3Drop = {};
		break;

	case 2:
		T3Drop = {};
		break;

	case 3:
		T3Drop = {};
		break;

	}

	//Tier 4 Loot:

	srand(time(NULL));
	int t4rd = rand() % 8 + 1;

	switch (t4rd) {

	case 1:
		T4Drop = {};
		break;

	case 2:
		T4Drop = {};
		break;

	case 3:
		T4Drop = {};
		break;

	}

	//Menu:

Menu:

	cout << endl << endl << "Welcome To The Highway! Choose a difficulty: " << endl << endl
		<< "1 - Easy" << endl
		<< "2 - Medium" << endl
		<< "3 - Hard" << endl
		<< "4 - Exit" << endl << endl;

	int diff;
	cin >> diff;
	switch (diff) {

		//Different Difficulties & The Game:

	case 1:
	{Player.health = 100; Player.maxhealth = 100; }

	charname(Player);

	break;

	case 2:
	{Player.health = 80; Player.maxhealth = 80; }

	break;

	case 3:
	{Player.health = 50; Player.maxhealth = 50; }

	break;

	case 4:
		cout << "-----TERMINATED-----";
		return 1;

	case 89032:
	{Player.health = 999999999; Player.maxhealth = 999999999; }
	cout << endl << Player.health << " : " << Player.maxhealth;
	goto Menu;

	default:
		cout << "You entered an invalid option! Try again" << endl << endl;
		main();
	}

}

//Game Function Definitions

void restart() {
	cout << "Would you like to restart? 1 - Yes, 2 - No" << endl << endl;

	int resvar;
	cin >> resvar;

	if (resvar == 1) {
		main();
	}
	else {
		cout << "-----TERMINATED-----";
	}
}

void gameover() {

	cout << "You died! Gameover!" << endl << endl;

	restart();
}

void gamewin() {

	cout << "You won! Congratulations!";

	restart();

}
